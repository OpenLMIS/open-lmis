/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.tasks.Exec

apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'cobertura'

task npm(type: Exec) {
    group = "Build"
    description = "Installs all Node.js dependencies defined in package.json"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
    inputs.file "package.json"
    outputs.dir "node_modules"
}

class GruntTask extends Exec {
    private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"
    private String switches = "--no-color"

    String gruntArgs = ""

    public GruntTask() {
        super()
        this.setExecutable(gruntExecutable)
    }

    public void setGruntArgs(String gruntArgs) {
        this.args = "$switches $gruntArgs".trim().split(" ") as List
    }
}

task jsHint(type: GruntTask) {
    description = 'Runs JSHint against all JS files and fails upon JSHint error'
    workingDir '.'
    gruntArgs = "jshint"
    dependsOn npm
}

task karmaRun(type: Exec) {
    description = 'Runs jasmine specs and publishes js tests coverage report'
    commandLine 'karma', 'start', 'karma.config.js', '--singleRun'
}

task lesslint(type: GruntTask) {
    description = 'Runs LessLint against all LESS files'
    workingDir '.'
    gruntArgs = "lesslint --force"
    dependsOn npm
}

task less(type: GruntTask) {
    description = 'Compiles all LESS files to CSS'
    workingDir '.'
    gruntArgs = "less"
    dependsOn npm
}

task uglify(type: GruntTask) {
    description = 'Minifies JS files'
    workingDir '.'
    gruntArgs = "uglify"
    dependsOn npm
}

task lesswatch(type: GruntTask) {
    description = 'Looks for changes in LESS and recompiles to CSS upon detecting change'
    workingDir '.'
    gruntArgs = 'watch'
    ignoreExitValue = true
    dependsOn npm
}

buildscript {
    repositories {
        mavenCentral();
//        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
//            name = 'GitHub'
//            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
//        };

    }
}

war {
    exclude "public/less/"
    exclude "public/css/"
    exclude "public/fonts/"
    exclude "public/images/"
    exclude "public/js/"
    exclude "public/lib/"

    doFirst {
        prepareVersionedDirectory.execute();
    }

    doLast {
        cleanWorkspace.execute()
    }
}

task prepareVersionedDirectory(type: Copy) {
    ext.currentTime = System.properties.get('version', new Date().getTime() + "");
    from('src/main/webapp/public') {
        exclude 'pages/**/*.*', 'v' + ext.currentTime + '**/*';
    }
    into 'src/main/webapp/public/v' + ext.currentTime;
    includeEmptyDirs = false;
}

tasks.withType(War) {
    eachFile { FileCopyDetails fileCopy ->
        if (fileCopy.name.equals('services.js') || fileCopy.name.equals('offline.appcacheOFF')) {
            fileCopy.filter(ReplaceTokens, tokens: [version: prepareVersionedDirectory.currentTime])
        }
        if (fileCopy.name.equals('offline.appcacheOFF')) {
            fileCopy.setName('offline.appcache')
        }
        if (fileCopy.name.endsWith('html') || fileCopy.name.endsWith('css') || fileCopy.name.endsWith('appcache'))
            fileCopy.filter { String line ->
                if (!line.contains(".html"))
                    line.replace('/public', '/public/v' + prepareVersionedDirectory.currentTime)
                else
                    "$line"
            }
    }
}

task cleanWorkspace(type: Delete) {
    delete 'src/main/webapp/public/v' + prepareVersionedDirectory.currentTime + '/';
}

build.doLast {
    karmaRun.execute()
    jsHint.execute()
    cleanWorkspace.execute()
}

dependencies {
    compile 'log4j:log4j:1.2.15',
            'commons-fileupload:commons-fileupload:1.2.2',
            'com.itextpdf:itextpdf:5.4.0',

            'com.wordnik:swagger-annotations:1.3.12',
            'com.mangofactory:swagger-models:0.9.5',
            'com.mangofactory:swagger-springmvc:0.9.5',

            project(':modules:authentication'),
            project(':modules:requisition'),
            project(':modules:core'),
            project(':modules:shipment'),
            project(':modules:rest-api'),
            project(':modules:reporting'),
            project(':modules:report'),
            project(':modules:distribution'),
            project(':modules:odk-api'),
            project(':modules:equipment'),
            project(':modules:vaccine'),
            project(':modules:help'),
            project(':modules:stock-management')

    testCompile  project(path: ':modules:core', configuration: 'testFixtures'),
            project(path: ':modules:rest-api', configuration: 'testFixtures'),
            project(path: ':modules:requisition', configuration: 'testFixtures'),
            project(path: ':modules:shipment', configuration: 'testFixtures'),
            project(path: ':modules:distribution', configuration: 'testFixtures'),
            project(path: ':modules:report', configuration: 'testFixtures'),
            project(path: ':modules:reporting', configuration: 'testFixtures')
}

jettyRun {
    jettyRun.httpPort = 9091;
    contextPath = ''
    daemon = true;
    jettyRun.scanIntervalSeconds = 1
    System.properties.get('environmentName', 'local')
    System.properties.get('defaultLocale', 'en')
}

def configureHttps(keystore, password) {
    ext.connectors = [jettyRun.class.classLoader.loadClass('org.mortbay.jetty.security.SslSocketConnector').newInstance()]
    ext.connectors[0].port = 9091
    ext.connectors[0].keystore = connectors[0].truststore = keystore
    ext.connectors[0].keyPassword = connectors[0].trustPassword = password
    ext.connectors[0].wantClientAuth = true
    ext.connectors[0].needClientAuth = false
    return ext.connectors;
}

task run(dependsOn: [jettyRun, lesswatch]) {
    description = 'Runs the Jetty server and starts watching LESS files for changes'
}

task explodedWar(type: Copy) {
    description = 'Explodes WAR file'
    into "$buildDir/exploded"
    with war
}

task deployOpenLmis(type: GradleBuild) {
    tasks = ['build']
    tasks = ['cargoRedeployRemote']
}

compileJava.dependsOn less

cobertura {
    coverageFormats << 'xml'
    coverageIgnoreTrivial = true
}